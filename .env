# --- AMBIENTE GERAL ---
# Define se a aplicação está rodando em desenvolvimento ou produção.
# Afeta como o NestJS se comporta (ex: logs mais detalhados, otimizações).
# Mantenha 'production' para o seu setup padrão com Nginx.
NODE_ENV=production

# --- CONFIGURAÇÃO DO MONGODB ---
# Credenciais para o usuário root do banco de dados.
# O docker-compose vai passar isso para o contêiner do Mongo na inicialização.
MONGO_USER=admin
MONGO_PASS=coloqueumasenhaforte_aqui_123

# --- CONFIGURAÇÃO DO BACK-END (NestJS) ---
# String de conexão completa que o NestJS usará para se conectar ao Mongo.
# Note que ela usa as variáveis MONGO_USER e MONGO_PASS. O Docker Compose substitui isso automaticamente.
# O hostname 'mongo' aponta para o serviço do MongoDB no docker-compose.
MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASS}@mongo:27017/zeine-api?authSource=admin

# Porta em que a API do NestJS irá rodar DENTRO do contêiner.
API_PORT=3001

# Segredo para assinar os JSON Web Tokens (JWT).
# IMPORTANTE: Troque por uma string longa, aleatória e segura. Nunca use um segredo fraco.
JWT_SECRET=SEU_SEGREDO_FORTE_E_UNICO_AQUI_PODE_SER_UMA_FRASE_LONGA_COM_NUMEROS_E_SIMBOLOS_123!@#

# Duração da validade dos tokens JWT (ex: 1d = 1 dia, 7d = 7 dias, 2h = 2 horas).
JWT_EXPIRES_IN=7d

# URL do Front-end para a configuração do CORS no Back-end.
# Como seu padrão é produção na porta 80, usamos http://localhost. A porta 80 é o padrão para http e não precisa ser especificada.
FRONTEND_URL=http://localhost

# --- CONFIGURAÇÃO DO FRONT-END (Vite) ---
# URL base que o código do front-end (rodando no navegador) usará para fazer chamadas à API.
# Deve apontar para a porta do back-end exposta no seu localhost.
VITE_API_URL=http://localhost:3001